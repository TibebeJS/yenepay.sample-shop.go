################################################################################
# Revel configuration file
# More info at http://revel.github.io/manual/appconf.html
################################################################################

# Revel build section
# This section contains values that are not reloadable
################################################################################

# Comma delimited list of folders that are included with the package, or build commands
# If you want to not include folders within these ones prefix the folder with a . to make it hidden
package.folders = conf, public, app/views




# Revel reconfigurable section
#
################################################################################


# Sets `revel.AppName` for use in-app.
# Example:
#   `if revel.AppName {...}`
app.name = yenepay.sample-shop.go

# A secret string which is passed to cryptographically sign the cookie to prevent
# (and detect) user modification.
# Keep this string secret or users will be able to inject arbitrary cookie values
# into your application
app.secret = 0cyjKnGHI9xsN4H4BDEev4G2QykU3yoQbQMHsnZYotCv0FNMIM5WgTSoCqduXyD7

# Revel running behind proxy like nginx, haproxy, etc.
app.behind.proxy = false


# The IP address on which to listen.
http.addr = 0.0.0.0

# The port on which to listen.
http.port = ${PORT}

# Whether to use SSL or not.
http.ssl = false

# Path to an X509 certificate file, if using SSL.
#http.sslcert =

# Path to an X509 certificate key, if using SSL.
#http.sslkey =


# Timeout specifies a time limit for request (in seconds) made by a single client.
# A Timeout of zero means no timeout.
http.timeout.read = 90
http.timeout.write = 60


# For any cookies set by Revel (Session,Flash,Error) these properties will set
# the fields of:
# http://golang.org/pkg/net/http/#Cookie
#
# Each cookie set by Revel is prefixed with this string.
cookie.prefix = REVEL

# A secure cookie has the secure attribute enabled and is only used via HTTPS,
# ensuring that the cookie is always encrypted when transmitting from client to
# server. This makes the cookie less likely to be exposed to cookie theft via
# eavesdropping.
#
# Defaults to false. If 'http.ssl' is enabled, this will be defaulted to true.
# This should only be true when Revel is handling SSL connections. If you are
# using a proxy in front of revel (Nginx, Apache, etc), then this should be left
# as false.
# cookie.secure = false

# Limit cookie access to a given domain.
#cookie.domain =

# Define when your session cookie expires.
# Values:
# "720h"
#   A time duration (http://golang.org/pkg/time/#ParseDuration) after which
#   the cookie expires and the session is invalid.
# "session"
#   Sets a session cookie which invalidates the session when the user close
#   the browser.
session.expires = 720h


# The date format used by Revel. Possible formats defined by the Go `time`
# package (http://golang.org/pkg/time/#Parse)
format.date     = 2006-01-02
format.datetime = 2006-01-02 15:04


# Determines whether the template rendering should use chunked encoding.
# Chunked encoding can decrease the time to first byte on the client side by
# sending data before the entire template has been fully rendered.
results.chunked = false

# Compression of your HTML and CSS files with gzip typically saves around 
# fifty to seventy percent of the file size. This means that it takes less 
# time to load your pages, and less bandwidth is used over all. 
# To enable compression, set value to true.
results.compressed = false



# The default language of this application.
i18n.default_language = en

# The default format when message is missing.
# The original message shows in %s
#i18n.unknown_format = "??? %s ???"



db.autoinit = true
db.import     = github.com/mattn/go-sqlite3
db.driver     = sqlite3
db.connection = file::memory:?mode=memory&cache=shared

build.tags=gorp

module.1.static=github.com/revel/modules/static
module.2.jobs=github.com/revel/modules/jobs
module.3.gorp=github.com/revel/modules/orm/gorp
module.4.testrunner=github.com/revel/modules/testrunner

[dev]
mode.dev=true
watch=true
results.pretty = true
watch = true
watch.mode = eager

log.all.filter.module.app = stdout    # Log all loggers for the application to the stdout
log.error.nfilter.module.app = stderr # Everything else that logs an error to stderr
log.crit.output = stderr              # Everything that logs something as critical goes to this

log.request.output = stdout


[prod]
watch=false

mode.dev = false

results.pretty = false

log.warn.output  = log/%(app.name)s-warn.json    # Log all warn messages to file
log.error.output = log/%(app.name)s-error.json   # Log all errors to file
log.crit.output = log/%(app.name)s-critical.json # Log all critical to file

log.request.output = log/%(app.name)s-requests.json